"use client";

import { useState } from "react";
import axios from "axios";

const ITEMS_PER_PAGE = 10; // 1ページあたりのアイテム数

export default function Home() {
  const [keyword, setKeyword] = useState("");
  const [cveList, setCveList] = useState([]);
  const [totalResults, setTotalResults] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);

  const handleSearch = async (page = 1) => {
    try {
      const response = await axios.get(`https://services.nvd.nist.gov/rest/json/cves/1.0?keyword=${keyword}&resultsPerPage=${ITEMS_PER_PAGE}&startIndex=${(page - 1) * ITEMS_PER_PAGE}`);
      const cveData = response.data.result.CVE_Items;
      setCveList(cveData);
      setTotalResults(response.data.totalResults);
      setCurrentPage(page);
    } catch (error) {
      console.error("Error fetching data:", error);
    }
  };

  const isSearchDisabled = keyword.trim().length === 0; // トリミングしてから長さをチェック

  const totalPages = Math.ceil(totalResults / ITEMS_PER_PAGE);

  return (
    <div>
      <h1>NVD Vulnerability Search</h1>
      <div>
        <input type="text" value={keyword} onChange={(e) => setKeyword(e.target.value)} placeholder="Enter keyword" />
        <button onClick={() => handleSearch(1)} disabled={isSearchDisabled}>
          Search
        </button>
      </div>
      <div>
        <h2>Matching CVEs ({totalResults} total):</h2>
        <ul>
          {cveList.map((cve) => (
            <li key={cve.cve.CVE_data_meta.ID}>
              <strong>CVE-ID:</strong> {cve.cve.CVE_data_meta.ID}
              <br />
              <strong>Summary:</strong> {cve.cve.description.description_data[0].value}
              <br />
              <strong>CVSSv2.0 Base Score:</strong> {cve.impact.baseMetricV2?.cvssV2?.baseScore || "N/A"}
              <br />
              <strong>CVSSv3.1 Base Score:</strong> {cve.impact.baseMetricV3?.cvssV3?.baseScore || "N/A"}
              <br />
              <strong>Published Date:</strong> {cve.publishedDate}
            </li>
          ))}
        </ul>
      </div>
      <div>
        <div>
          Page {currentPage} of {totalPages}
        </div>
        <button onClick={() => handleSearch(currentPage - 1)} disabled={currentPage === 1}>
          Previous
        </button>
        <button onClick={() => handleSearch(currentPage + 1)} disabled={currentPage === totalPages}>
          Next
        </button>
      </div>
    </div>
  );
}

"use client";

import { useState } from "react";
import axios from "axios";

const ITEMS_PER_PAGE = 10; // 1ページあたりのアイテム数

export default function Home() {
  const [keyword, setKeyword] = useState("");
  const [cveList, setCveList] = useState([]);
  const [totalResults, setTotalResults] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [isSearching, setIsSearching] = useState(false);
  const [pageCache, setPageCache] = useState({});

  async function fetchCveData(keyword, page) {
    const response = await axios.get(`https://services.nvd.nist.gov/rest/json/cves/1.0?keyword=${encodeURIComponent(keyword)}&resultsPerPage=${ITEMS_PER_PAGE}&startIndex=${(page - 1) * ITEMS_PER_PAGE}`);
    return response.data;
  }

  const handleSearch = async (page = 1) => {
    setIsSearching(true);
    if (pageCache[page]) {
      setCveList(pageCache[page]);
      setIsSearching(false);
    } else {
      try {
        const fetchedData = await fetchCveData(keyword, page);
        const cveData = fetchedData.result.CVE_Items;
        setCveList(cveData);
        setTotalResults(response.data.totalResults);
        setPageCache((prevCache) => ({ ...prevCache, [page]: cveData }));
      } catch (error) {
        console.error("Error fetching data:", error);
      }
      setIsSearching(false);
    }
    setCurrentPage(page);
  };

  const totalPages = Math.ceil(totalResults / ITEMS_PER_PAGE);

  return (
    <div>
      <h1>NVD Vulnerability Search</h1>
      <SearchBar keyword={keyword} setKeyword={setKeyword} onSearch={() => handleSearch(1)} isSearching={isSearching} />
      <ResultsList cveList={cveList} isSearching={isSearching} totalResults={totalResults} />
      <Pagination currentPage={currentPage} totalPages={totalPages} onPageChange={(page) => handleSearch(page)} />
    </div>
  );
}

function SearchBar({ keyword, setKeyword, onSearch, isSearching }) {
  return (
    <div>
      <input type="text" value={keyword} onChange={(e) => setKeyword(e.target.value)} placeholder="Enter keyword" />
      <button onClick={onSearch} disabled={keyword.trim().length === 0 || isSearching}>
        Search
      </button>
    </div>
  );
}

function ResultsList({ cveList, isSearching, totalResults }) {
  return (
    <div>
      <h2>Matching CVEs ({totalResults} total):</h2>
      {isSearching ? (
        <div>Searching...</div>
      ) : (
        <ul>
          {cveList.map((cve) => (
            <CveItem cve={cve} />
          ))}
        </ul>
      )}
    </div>
  );
}

function CveItem({ cve }) {
  return (
    <li>
      <strong>CVE-ID:</strong> {cve.cve.CVE_data_meta.ID}
      <br />
      <strong>Summary:</strong> {cve.cve.description.description_data[0].value}
      <br />
      <strong>CVSSv2.0 Base Score:</strong> {cve.impact.baseMetricV2?.cvssV2?.baseScore || "N/A"}
      <br />
      <strong>CVSSv3.1 Base Score:</strong> {cve.impact.baseMetricV3?.cvssV3?.baseScore || "N/A"}
      <br />
      <strong>Published Date:</strong> {cve.publishedDate}
    </li>
  );
}

function Pagination({ currentPage, totalPages, onPageChange }) {
  return (
    <div>
      <button onClick={() => onPageChange(currentPage - 1)} disabled={currentPage === 1}>
        Previous
      </button>
      <span>
        Page {currentPage} of {totalPages}
      </span>
      <button onClick={() => onPageChange(currentPage + 1)} disabled={currentPage === totalPages}>
        Next
      </button>
    </div>
  );
}
